# lessons/standard-addition-spectrophotometry.yml
# 
# STARTER TEMPLATE FOR ACT-CMS LESSON PORTAL SUBMISSION
# Replace all placeholder text with your actual lesson information
# Remove any sections that don't apply to your lesson

# BASIC METADATA (REQUIRED)
# Use a clear, descriptive title that includes the main topic
title: "Standard Addition Spectrophotometry"

# Brief description for search results (1-2 sentences)
description: "Data analysis for a Standard Addition Spectrophotometry Experiment in Analytical Chemistry Laboratory."

# Longer description for the lesson page (use | for multi-line text)
expanded_description: |
  This lesson can be used to analyze standard addition spectrophotometric data collected by students in an analytical chemistry laboratory.
  The suggested context would be to walk through it together in the analytical laboratory after data collection.
  It would be helpful if students have completed the Basic Tasks and Solution Preparation modules prior to this one.
  About an hour at the end of lab should be allocated to this data analysis module.

# COURSE INFORMATION (REQUIRED)
# Choose ONE: "None", "Beginner", "Intermediate", "Advanced"
programming_skill: "None"
# None: No programming experience. 
# Beginner: Knows variables, conditionals, loops
# Intermediate: Can write their own scripts from scratch
# Advanced: Can write/develop software.

# Examples: "Foundational Module", "Physical Chemistry", "Organic Chemistry", 
# "Inorganic Chemistry", "Analytical Chemistry", "Biochemistry", "Materials Science", "Other"
primary_course: "Analytical Chemistry"

# List other courses where this lesson could be used (optional)
also_for:
  - "General Chemistry"
  - "Physical Chemistry"

# List all authors
authors: 
  - "Dr. Christine Morales"

# Estimated total time for all materials
estimated_time: "1 hour"

# Write a description of your module.
# Single notebook, multi-part module, etc?
format: "Single Notebook"

# INSTRUCTOR INFORMATION (OPTIONAL)
# Contact email for instructor access requests (optional - will use default if not specified)
instructor_email: "moralech@mountunion.edu"
# Note: Instructor materials will be located at: instructor-repo/{lesson-filename}/
# where {lesson-filename} matches this YAML file's name

# INSTRUCTOR DETAILS (OPTIONAL)
# What level of students was this piloted with?
student_level: "Undergraduate - Second Year"  # e.g., "Graduate", "Undergraduate - First Year", "Mixed Graduate/Undergraduate"
# How many students has this been tested with?
students_piloted: 10  # Number of students
# Free-form notes for instructors
instructor_notes: |
  This module provides practice to reinforce programming skills introduced in two prior modules for students with no prior coding experience.

  Teaching tips:
  - If students have not yet been introduced to standard addition methods, consider offering a short explanation of this approach.
  - If you have run a blank with no analytical reagent, remind students to enter *corrected* absorbances (after subtraction) in Task 1.
  - If your students have already done Basic Tasks and you have time, consider providing less sample code for data entry in Task 1.
  - If students have *not* completed the Basic Tasks and Solution Preparation modules prior to this one, consider providing sample code in Task 2.
  - Important: Standard addition methods run a higher risk of exceeding the range of linearity. If plots in Task 2 level off dramatically, 
    ask students to consider going back to Task 1, truncating their arrays accordingly, and recalculating.  This will reduce N, but may improve accuracy.
  - Students should work together in groups to ensure they are accountable to understand each part.
  - Encourage students to share ideas but code/answer questions in their own copy of the notebook.
  - Remind students to save their own copy before they begin work.
  - Some students may have several Google accounts; remind them to be aware of which account is logged in when they save.
  
  Timing notes:
  - Task 1 typically takes students 10-15 minutes when sample code is provided.  Add 5 minutes if prompting students to copy Numpy syntax from Basic Tasks.
  - Task 2 typically takes students 10-15 minutes when sample code is *not* provided.  Subtract 5 minutes if sample code is provided.  
  - Task 3 typically takes students 10-15 minutes.  Remind students to save and print the graph to tape into their lab notebook.
    *If possible, walk around during Task 2 to check for linearity in student graphs; advise students to truncate data if necessary.*  
    If necessary, truncating data and then re-running the code cells in Tasks 1, 2 and 3 may take an additional 10-15 minutes.
  - Task 4 typically takes students 5-10 minutes.  This step *cannot* be skipped, even if time is tight.
  
  Common student questions:
  - Students may ask if they should enter raw absorbance data or corrected absorbance values.
  - Students may ask if they need to tape the graph into their laboratory notebook before turning it in.
  - Students may skip some steps if they find it is necessary to truncate arrays in Part 1 and recalculate.
    This is a good opportunity to teach/remind students to re-run all code cells in order when recalculating.

# Related lessons that complement this one
related_modules:
  - "moralech-umu-basic-tasks"
  - "statistical-testing-beta" 
  - "solution-preparation-spectrophotometry"
  - "calibration-of-glassware"
  - "ocean-acidification"
  - "buffer-solutions"
  - "hplc-analysis"
  - "gc-ms-internal-standard"

# REPOSITORY URLS (REQUIRED)
# Link to the repository containing your public material
public_repo_url: "https://github.com/act-cms/standard-addition-spectrophotometry"

# MATERIALS SECTION (REQUIRED)
# List each notebook/material in logical order
materials:
  - title: "Standard Addition Spectrophotometry"
    description: "Generate code in Python to perform four tasks: Entering and processing data as an array; Linear least-squares fitting; Plotting data and a model with uncertainty; Calculating analyte concentration and uncertainty from multiple standard additions."
    type: "notebook"  # Usually "notebook", could be "slides", "dataset", etc.
    duration: "1 hour"
    
    # REQUIRED: Include at least one URL (preferably both)
    # Direct link to notebook file on GitHub
    github_url: "https://github.com/act-cms/standard-addition-spectrophotometry/blob/main/Standard_Addition_Student_Version.ipynb"
    # Google Colab launch link (recommended for accessibility)
    colab_url: "https://colab.research.google.com/github/act-cms/standard-addition-spectrophotometry/blob/main/Standard_Addition_Student_Version.ipynb"
    
    # Learning objectives specific to this material
    objectives:
      - "Content: Explain how standard addition permits quantitative analysis of a component in a matrix that could otherwise interfere with the analyte signal."
      - "Content: Use a standard addition calibration curve to find the concentration of an analyte."
      - "Process: Use Python code to transform data using structures such as arrays."
      - "Process: Use Python code to visualize data using different types of graphs."
  

# LEARNING OBJECTIVES (REQUIRED)
# What molecular science concepts will students learn?
scientific_objectives:
  - "Explain how standard addition permits quantitative analysis of a component in a matrix that could otherwise interfere with the analyte signal"
  - "Use a standard addition calibration curve to find the concentration of an analyte"

# What computational/programming skills will students develop?
cyberinfrastructure_objectives:
  - "Use Python code to transform data using structures such as arrays"
  - "Use Python code to visualize data using different types of graphs"

# PREREQUISITES (REQUIRED)
# What science background do students need?
scientific_prerequisites:
  - "General chemistry"
  - "Calibration curves"

# What programming experience is assumed?
programming_prerequisites:
  - "No prior programming experience required"
  # OR: eg "Basic Python syntax (variables, loops, functions)"

# PLATFORM SUPPORT (REQUIRED)
# List platforms where your materials can be used.
platforms:
  - "Google Colab"
  - "Local Installation"
  - "ChemCompute"

# Which platform do you recommend for most users?
recommended_platform: "Google Colab"

# METADATA (REQUIRED)
# Tags help with searching - use relevant keywords
tags:
  - "python"
  - "analytical-chemistry"
  - "laboratory"
  - "data-analysis"  # Use appropriate scientific area tags
