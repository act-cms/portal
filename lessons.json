[
  {
    "title": "Bridging Basic Chemistry and Cheminformatics: A Jupyter-based Module on Molecular Representation for Introductory Chemistry",
    "description": "Students will learn how molecules are represented computationally and apply programming concepts to analyze and visualize molecular structures using Jupyter notebooks. The lesson builds foundational skills in cheminformatics and computational thinking for molecular science.",
    "expanded_description": "This lesson introduces students to the fundamental ways molecules are represented in computational chemistry and cheminformatics, with a focus on practical skills using Jupyter notebooks. Students will explore how chemical structures are encoded as data (e.g., SMILES, InChI, and molecular graphs), and learn to manipulate and visualize these representations using Python.\n\nDesigned for introductory chemistry students with beginner programming experience, the module bridges core chemical concepts with modern computational tools. Through hands-on activities, students will gain experience reading, interpreting, and generating molecular representations, and will use open-source libraries to analyze and visualize molecular structures.\n\nBy the end of the lesson, students will understand the importance of molecular representations in computational science, be able to apply basic programming to chemical problems, and develop foundational skills for further study in cheminformatics and molecular modeling. This lesson supports the integration of computational thinking into general chemistry curricula and prepares students for more advanced topics in molecular science.\n",
    "programming_skill": "Beginner",
    "primary_course": "General Chemistry",
    "authors": [
      "Prof. Kevin P. Greenman"
    ],
    "estimated_time": "2-3 hours",
    "format": "Multi-Part Materials Module",
    "instructor_email": "kgreenman@catholic.tech",
    "student_level": "Undergraduate - First/Second Year",
    "students_piloted": 15,
    "instructor_notes": "Additional context for instructors using this lesson:\n\n- These materials are under development and will be first piloted in a course in Fall 2025.  \n",
    "public_repo_url": "https://github.com/act-cms/molecular-representations",
    "materials": [
      {
        "title": "Chemistry Visualization",
        "description": "Visualize chemical structures in 2D and 3D using Python tools. Learn to represent molecules graphically and understand the basics of cheminformatics visualization.",
        "type": "notebook",
        "duration": "20 min",
        "github_url": "https://github.com/act-cms/molecular-representations/blob/main/1-chemistry_visualisation.ipynb",
        "objectives": [
          "Understand how to visualize molecules in 2D and 3D.",
          "Use Python libraries to display and manipulate chemical structures."
        ]
      },
      {
        "title": "Conformers: Exploring Molecular Flexibility",
        "description": "Explore the concept of molecular conformers and how different conformations affect molecular properties. Generate and analyze conformers computationally.",
        "type": "notebook",
        "duration": "20 min",
        "github_url": "https://github.com/act-cms/molecular-representations/blob/main/2-conformers.ipynb",
        "objectives": [
          "Define and generate molecular conformers.",
          "Analyze the impact of conformational changes on molecular properties."
        ]
      },
      {
        "title": "Digital Chemistry Representations",
        "description": "Learn about digital representations of molecules, including SMILES and InChI. Practice converting between different formats and understand their computational uses.",
        "type": "notebook",
        "duration": "20 min",
        "github_url": "https://github.com/act-cms/molecular-representations/blob/main/3-digital_chemistry_representations.ipynb",
        "objectives": [
          "Describe common digital representations for molecules.",
          "Convert between SMILES, InChI, and other formats."
        ]
      },
      {
        "title": "Hybridisation in Chemistry",
        "description": "Investigate the concept of hybridisation and how it explains molecular geometry and bonding. Use computational tools to assign hybridisation states.",
        "type": "notebook",
        "duration": "20 min",
        "github_url": "https://github.com/act-cms/molecular-representations/blob/main/4-hybridisation.ipynb",
        "objectives": [
          "Explain the concept of atomic hybridisation.",
          "Assign hybridisation states to atoms in molecules."
        ]
      },
      {
        "title": "VSEPR and Molecular Geometry",
        "description": "Apply Valence Shell Electron Pair Repulsion (VSEPR) theory to predict and visualize molecular shapes.",
        "type": "notebook",
        "duration": "20 min",
        "github_url": "https://github.com/act-cms/molecular-representations/blob/main/5-vsepr_geometry.ipynb",
        "objectives": [
          "Predict molecular geometry using VSEPR theory.",
          "Visualize 3D molecular shapes and relate them to electron pair arrangements."
        ]
      },
      {
        "title": "Bond Types and Chemical Structure",
        "description": "Differentiate between ionic, covalent, and other bond types. Explore how bond types influence molecular properties and representations.",
        "type": "notebook",
        "duration": "20 min",
        "github_url": "https://github.com/act-cms/molecular-representations/blob/main/6-bond_types.ipynb",
        "objectives": [
          "Identify and compare different types of chemical bonds.",
          "Relate bond types to molecular structure and reactivity."
        ]
      },
      {
        "title": "Working with Chemistry Data",
        "description": "Read, clean, and visualize chemical datasets using Python. Learn to handle SMILES strings and property data for cheminformatics analysis.",
        "type": "notebook",
        "duration": "20 min",
        "github_url": "https://github.com/act-cms/molecular-representations/blob/main/7-chemistry_data.ipynb",
        "objectives": [
          "Import and manipulate chemical data in Python.",
          "Visualize and analyze chemical datasets."
        ]
      },
      {
        "title": "Introduction to Chemprop and Machine Learning",
        "description": "Train a basic Chemprop machine learning model on chemical data. Visualize regression results and understand the basics of molecular property prediction.",
        "type": "notebook",
        "duration": "30 min",
        "github_url": "https://github.com/act-cms/molecular-representations/blob/main/8-chemprop_machine_learning.ipynb",
        "objectives": [
          "Train a simple machine learning model for molecular property prediction.",
          "Interpret and visualize model results using Python tools."
        ]
      }
    ],
    "scientific_objectives": [
      "Predict the molecular geometry of simple molecules using Valence Shell Electron Pair Repulsion (VSEPR) theory",
      "Describe the concept of hybridization and determine the hybridization state of the central atom in molecules, correctly identifying sp, sp², sp³, sp³d, and sp³d² hybridizations",
      "Identify and differentiate between ionic and covalent bonds based on electronegativity differences and electron transfer/sharing mechanisms",
      "Translate between different representations of chemical structures (e.g., Lewis structures, SMILES, 3D models)",
      "Select and justify the most suitable chemical representation for a specific scientific or computational task"
    ],
    "cyberinfrastructure_objectives": [
      "Read and write chemical data in the form of SMILES strings and property values from CSV files using Pandas in Python",
      "Clean and visualize chemical datasets using Pandas, RDKit, and other Python libraries/operations",
      "Use GPU computing resources to train a basic Chemprop and other machine learning models",
      "Visualize results of machine learning regression using Matplotlib and Seaborn"
    ],
    "scientific_prerequisites": [
      "High school level mathematics",
      "Basic understanding of scientific concepts"
    ],
    "programming_prerequisites": [
      "Basic Python syntax (variables, loops, functions)"
    ],
    "platforms": [
      "Local Installation"
    ],
    "recommended_platform": "Local Installation",
    "tags": [
      "python",
      "machine-learning",
      "visualization"
    ],
    "id": "molecular-representations",
    "instructor_repo": "act-cms/instructor-materials",
    "instructor_repo_path": "molecular-representations"
  },
  {
    "title": "Diffusion from the Atomistic to Continuum Scale",
    "description": "Explore ways to measure and model diffusion computationally, starting with molecular dynamics in a web app and then moving to a Fickian continuum description.",
    "expanded_description": "Explore diffusion at multiple lengthscales, no coding experience required! \nStudents will start by collecting their \"experimental\" data using a 2D molecular dynamics (MD) web app and \nby stepping through this notebook, will see how one can extract a diffusivity from mean squared displacement\nacross particles. \n\nNext, they will connect this to the continuum (Fick's Laws) description and investigate how the intuitive notion\nof diffusion (how material \"spreads out\") connects to the atomistic picture from Brownian motion.\n\nAlong the way, there are prompts to reflect on both the conceptual content as well as the complementarity between\nthe experimental and computational paradigms.\n",
    "programming_skill": "None",
    "primary_course": "Materials Science",
    "also_for": [
      "Physical Chemistry"
    ],
    "authors": [
      "Prof. Rachel C. Kurchin"
    ],
    "estimated_time": "2-3 hours",
    "format": "Single notebook",
    "instructor_email": "rkurchin@cmu.edu",
    "student_level": "Undergraduate - First Year",
    "students_piloted": 30,
    "instructor_notes": "Additional context for instructors using this lesson:\n\nThis activity is designed as a lab activity to expose students to some techniques and capabilities of\ncomputational materials science with no programming prerequisites. That is, all they have to do with this\nJupyter notebook is run existing cells of code and in some cases paste in data or change one number. My goals\nwere to get the students thinking about how computation as a paradigm is distinct from pure theory and can \ncomplement both theory and experiment, e.g. by probing scales of length and time inaccessible in a physical\nlab, or through massive replication through automation.\n\nWhen I piloted this activity (in Carnegie Mellon's introductory materials science course), it was \nactually before they had seen anything about diffusion in the associated lecture. I think it could work well\nin either scenario, though, it would just affect how technical one should expect the students to get in their\nresponses to the reflection prompts, and also what context would be needed in the prelab mini-lecture. My pilot\naudience was also extremely heterogeneous in programming background, some first-year undergraduates with \nessentially no experience, and some more senior computer science students, and it worked just fine.\n\nFor my course, the deliverable was a standard lab memo that included responses to the reflection prompts within\nthe notebook, as well as this additional prompt: \"Please also write at least a few sentences reflecting on \ncomputation as an \"experimental\" paradigm generally. How do you see it as similar to or different from \nexperiments? What can we learn about diffusion more easily from one approach compared to the other?\"\n\nLogistical tips, and things to emphasize in prelab mini-lecture:\n- Demonstrate launching the notebook in chosen platform (I suggest ChemCompute), including setting the correct runtime!\n- Demonstrate using the online MD tool and getting the density up high enough (easiest technique is to use the \"freeze\" button and then drag the number slider up repeatedly)\n- Since the first two setup cells to install and import packages will take a few minutes to run, try to make sure students get those going first and then start reading and exploring the MD engine, etc.\n\nSome student \"gotchas\" I ran into a few times:\n- Not setting the correct runtime (e.g. they're in Python instead of Julia) so none of the code runs\n- Not evaluating the cells after pasting their data in\n- Data formatting issues due to either not pasting in the full contents of the data dump, resetting stats during data collection, etc.\n\nPossibilities to \"level up\" this activity for more advanced students:\n- Connect to 2D Lennard-Jones phase diagram (conditions here are in the two-phase solid-liquid region!) and thinking about why solid ends up in middle of box and liquid along the edges (see e.g. https://www.researchgate.net/publication/49750821/figure/fig1/AS:667216336936969@1536088179352/Phase-diagram-of-2D-Lennard-Jones-solid-as-given-in-9-The-first-order-boundaries-are.png) \n- \"Skeletonize\" some of the code cells and ask students to fill in some of the analysis or visualization themselves\n- Get more in-depth into what's going on with the MD, understand why temperature drifts, etc.\n- Have them repeat the second portion at another temperature and think about how/why the results change\n- Dive more into some of the PDE stuff at the end\n",
    "public_repo_url": "https://github.com/rkurchin/27100_diffusion_computational_lab",
    "materials": [
      {
        "title": "Diffusion Computational Lab",
        "description": "Explore diffusion computationally at atomistic and continuum lengthscales.",
        "type": "notebook",
        "duration": "2-3 hours",
        "github_url": "https://github.com/rkurchin/27100_diffusion_computational_lab/blob/main/diffusion_computational_lab.ipynb",
        "colab_url": "https://colab.research.google.com/github/rkurchin/27100_diffusion_computational_lab/blob/main/colab/diffusion_computational_lab_colab.ipynb",
        "objectives": [
          "Understand how we measure and model diffusion computationally at both atomistic and continuum scales",
          "Consider complementarity between computational and experimental paradigms"
        ]
      }
    ],
    "scientific_objectives": [
      "Observe diffusive processes in an atomistic simulation",
      "Explain how we can compute a diffusivity from the slope of MSD vs. time",
      "Connect these atomistic mechanisms to the continuum (Fickian) description"
    ],
    "cyberinfrastructure_objectives": [
      "Handle tabular data",
      "Interact with a literate programming environment (Jupyter)",
      "Interpret parameters from a model fit",
      "Consider complementarity between computational and experimental paradigms"
    ],
    "scientific_prerequisites": [
      "High school chemistry/physics",
      "High school algebra/precalc"
    ],
    "programming_prerequisites": [
      "No prior programming experience required"
    ],
    "platforms": [
      "ChemCompute",
      "Google Colab",
      "Local Installation"
    ],
    "recommended_platform": "ChemCompute",
    "tags": [
      "julia",
      "molecular-dynamics",
      "visualization",
      "diffusion",
      "materials-science"
    ],
    "id": "diffusion",
    "instructor_repo": "act-cms/instructor-materials",
    "instructor_repo_path": "diffusion"
  },
  {
    "title": "Introduction to Programming for Molecular Scientists",
    "description": "Learn fundamental programming concepts in Python including data types, file operations, and basic programming structures.",
    "expanded_description": "This foundational module introduces students to programming concepts essential for computational molecular science. \nStudents will learn Python basics including variables, data types, control structures, and file operations through \nhands-on exercises designed for scientific applications.\n\nThe module emphasizes practical programming skills that serve as prerequisites for more advanced computational \nlessons in chemistry and molecular sciences.\n",
    "programming_skill": "None",
    "primary_course": "Foundational Module",
    "also_for": [
      "Physical Chemistry",
      "Materials Science"
    ],
    "authors": [
      "Dr. Jessica A. Nash",
      "Prof. Ashley McDonald"
    ],
    "estimated_time": "2-3 hours",
    "format": "Multi-Part Materials Module",
    "instructor_email": "instructor-access@university.edu",
    "instructor_notes": "This introductory module works well as the first programming lesson for students with no coding experience.\n\nTeaching tips:\n- Students often need extra time with the file reading concepts in Part 2\n- Encourage students to experiment with the code examples\n- Common issue: students forget to run cells in order\n",
    "public_repo_url": "https://github.com/act-cms/foundational-intro-python",
    "materials": [
      {
        "title": "Introduction to Python",
        "description": "Introduction to Python programming language, basic data types, and operations.",
        "type": "notebook",
        "duration": "1 hour",
        "github_url": "https://github.com/act-cms/foundational-intro-python/blob/main/01-introduction-to-python.ipynb",
        "colab_url": "https://colab.research.google.com/github/act-cms/foundational-intro-python/blob/main/colab_notebooks/01-introduction-to-python.ipynb",
        "objectives": [
          "Understand basic Python syntax and data types",
          "Learn about setting variables, for loops, and conditionals",
          "Write simple scripts in Jupyter notebooks to perform calculations"
        ]
      },
      {
        "title": "Reading Data from a File",
        "description": "Opening files using open, reading line by line, and searching for a pattern in the file.",
        "type": "notebook",
        "duration": "1 hour",
        "github_url": "https://github.com/act-cms/foundational-modules/blob/main/intro-programming/reading_from_file.ipynb",
        "colab_url": "https://colab.research.google.com/github/act-cms/foundational-modules/blob/main/intro-programming/colab-notebooks/student/reading_from_file.ipynb",
        "objectives": [
          "Open a file and read its contents line by line",
          "Search for specific patterns in text files",
          "Extract relevant data from files"
        ]
      }
    ],
    "scientific_objectives": [
      "Apply programming concepts to solve basic scientific problems",
      "Connect programming fundamentals to molecular science applications"
    ],
    "cyberinfrastructure_objectives": [
      "Execute Python code in Jupyter notebook environments",
      "Understand basic programming concepts: variables, loops, conditionals",
      "Read and process data from files",
      "Debug simple programming errors",
      "Develop computational thinking skills for scientific problem-solving"
    ],
    "scientific_prerequisites": [
      "High school level mathematics",
      "Basic understanding of scientific concepts"
    ],
    "programming_prerequisites": [
      "No prior programming experience required"
    ],
    "platforms": [
      "Google Colab",
      "ChemCompute",
      "Local Installation"
    ],
    "recommended_platform": "Google Colab",
    "tags": [
      "introduction",
      "python",
      "jupyter",
      "foundational"
    ],
    "id": "foundational-intro-python",
    "instructor_repo": "act-cms/instructor-materials",
    "instructor_repo_path": "foundational-intro-python"
  },
  {
    "title": "Introduction to Python using NMR data for a first year, graduate level course",
    "description": "Students are introduced to the use of Python to perform cheminformatics, \nanalyze NMR data and generate visualizations for data.\n",
    "expanded_description": "Four notebooks cover applications chemistry graduate students might need to utilize Python for routine\nanalysis of chemical structures using rdkit, processing NMR data for reaction kinetics and nuclear\nspin relaxation data, and to plot data/results. Applicable for organic, inorganic and polymer chemists \nwith little to no programming experience. Students will leave with the ability to load their own data, \nutilize published Python packages and create plots of the resultant information/data.\n\nThe material was introduced along with general NMR lectures covering introduction to NMR Physics, chemical shifts, \nspin-spin coupling, relaxation mechanisms, 1D and 2D pulse sequences and processing NMR data. Students are encouraged \nto work in teams for various questions posed in class as well as structural assignment problems. \n  \n",
    "programming_skill": "None",
    "primary_course": "Foundational Module",
    "also_for": [
      "Organic Chemistry",
      "Inorganic Science",
      "Other"
    ],
    "authors": [
      "Dr. Seth Veenbaas",
      "Prof. Marc ter Horst"
    ],
    "estimated_time": "4 hours",
    "format": "Multi-Part Materials Module",
    "instructor_email": "terhorst@unc.edu",
    "student_level": "Mixed Graduate/Undergraduate",
    "students_piloted": 25,
    "instructor_notes": "Additional context for instructors using this lesson:\n\n- This lesson works well when paired with instruction on NMR Spectroscopy for synthetic chemists\n- Take extra time with the first two notebooks for students new to Python programming\n- Homework is designed to show evidence students have gone through the notebooks (not to test skill development)\n\nTiming notes:\n- Part 1 (Day 0 , Python Essentials) is relatively quick and can be covered in a few minutes at the beginning of the course\n- Other parts are covered during a 45 minute class period, one per week\n- Advanced students are encouraged to work with people new to programming\n\nCommon student questions:\n- \"Why do we need Python for NMR?\"\n- \"I don't know what some of these error messages mean or how to address them.\"\n",
    "related_modules": [
      "computational-chemistry-basics"
    ],
    "public_repo_url": "https://github.com/act-cms/python-for-nmr",
    "materials": [
      {
        "title": "Part 1: Python essentials",
        "description": "Brief description of what this notebook covers",
        "type": "notebook",
        "duration": "30 minutes",
        "github_url": "https://github.com/act-cms/python-for-nmr/blob/main/0-python-essentials/Day0_python_essentials.ipynb",
        "objectives": [
          "Open a Jupyter notebook",
          "Python logic statements, for loops, Python lists"
        ]
      },
      {
        "title": "Part 2: Introduction to cheminformatics",
        "description": "Using SMILES strings to work with rdkit",
        "type": "notebook",
        "duration": "50 min",
        "github_url": "https://github.com/act-cms/python-for-nmr/blob/main/1-intro-to-cheminformatics/Day1_rdkit.ipynb",
        "objectives": [
          "Use SMILES strings",
          "Learn how to import packages/libraries.",
          "Use rdkit library to draw and characterize molecules.",
          "Learn how to get help with tab complete and the help() function."
        ]
      },
      {
        "title": "Part 3: NMR Kinetics",
        "description": "Using Python to determine a rate constant from integrals of NMR data",
        "type": "notebook",
        "duration": "50 min",
        "github_url": "https://github.com/act-cms/python-for-nmr/blob/main/2-nmr-kinetics/Day2_NMR_kinetics.ipynb",
        "objectives": [
          "Use pandas and scipy to load and analyze NMR kinetics data.",
          "Determine the reaction order and rate constant (k) from NMR reaction monitoring data."
        ]
      },
      {
        "title": "Part 4: NMR Spin Relaxation",
        "description": "Using Python to determine a nuclear spin relaxation times (T1) from integrals of inversion recovery data",
        "type": "notebook",
        "duration": "50 min",
        "github_url": "https://github.com/act-cms/python-for-nmr/blob/main/2-nmr-kinetics/Day2_NMR_kinetics.ipynb",
        "objectives": [
          "Use pandas and scipy to load and analyze NMR kinetics data.",
          "Determine the reaction order and rate constant (k) from NMR reaction monitoring data."
        ]
      }
    ],
    "scientific_objectives": [
      "Apply Python programming to analyze NMR data",
      "Determine reaction rates from NMR data",
      "Determine nuclear spin-lattice relaxation from NMR data"
    ],
    "cyberinfrastructure_objectives": [
      "Use basic Python programming to work with a molecular database",
      "Write and execute Python code in Jupyter notebooks",
      "Use Python packages to fit and display data",
      "Create visualizations of NMR data",
      "Debug common programming errors"
    ],
    "scientific_prerequisites": [
      "General chemistry",
      "Organic Chemistry",
      "Understanding of molecular structure",
      "Experience with proton, one-dimensional NMR spectra"
    ],
    "programming_prerequisites": [
      "No prior programming experience required"
    ],
    "platforms": [
      "ChemCompute",
      "Local Installation"
    ],
    "recommended_platform": "ChemCompute",
    "tags": [
      "python",
      "NMR",
      "NMR Spectroscopy",
      "visualization",
      "reaction rate"
    ],
    "id": "python-for-nmr",
    "instructor_repo": "act-cms/instructor-materials",
    "instructor_repo_path": "python-for-nmr"
  }
]